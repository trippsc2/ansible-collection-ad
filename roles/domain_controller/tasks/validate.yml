---
- name: Gathering Facts
  when:
    - ansible_distribution is not defined or
      ansible_os_family is not defined or
      ansible_windows_domain_member is not defined
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!min'
      - distribution
      - os_family
      - windows_domain

- name: Validate Windows Server
  ansible.builtin.assert:
    that:
      - ansible_os_family == 'Windows'
      - ('Windows Server' in ansible_distribution)
    fail_msg: "This role can only be run on a Windows Server system.  {{ ansible_distribution }} is not supported."
    success_msg: "This role is running on {{ ansible_distribution }}."

- name: Validate domain name
  ansible.builtin.assert:
    that:
      - dc_domain_name is community.general.fqdn_valid
    fail_msg: "The 'dc_domain_name' variable must be defined as a valid FQDN. Value: {{ dc_domain_name }}"
    success_msg: "The 'dc_domain_name' variable is defined as a valid FQDN."

- name: Validate system is already a domain member
  when:
    - not dc_first_domain_controller
  ansible.builtin.assert:
    that:
      - ansible_windows_domain_member
      - ansible_windows_domain == dc_domain_name
    fail_msg: "This system is not a domain member of {{ dc_domain_name }}."
    success_msg: "This system is a domain member of {{ dc_domain_name }}."

- name: Validate domain admin user is defined
  when:
    - not dc_first_domain_controller
  ansible.builtin.assert:
    that:
      - dc_domain_admin_user is defined
    fail_msg: "The 'dc_domain_admin_user' variable must be defined."
    success_msg: "The 'dc_domain_admin_user' variable is defined."

- name: Validate domain admin password is defined
  when:
    - not dc_first_domain_controller
  ansible.builtin.assert:
    that:
      - dc_domain_admin_password is defined
    fail_msg: "The 'dc_domain_admin_password' variable must be defined."
    success_msg: "The 'dc_domain_admin_password' variable is defined."

- name: Validate DNS forwarder
  loop: "{{ dc_dns_forwarders }}"
  ansible.builtin.assert:
    that:
      - item is ansible.utils.ipv4
    fail_msg: "{{ item }} is not a valid IPv4 address."
    success_msg: "{{ item }} is a valid IPv4 address."

- name: Validate DNS server
  loop: "{{ dc_dns_servers }}"
  ansible.builtin.assert:
    that:
      - item is ansible.utils.ipv4
    fail_msg: "{{ item }} is not a valid IPv4 address."
    success_msg: "{{ item }} is a valid IPv4 address."
